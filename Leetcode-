Question-

Rat in a Maze Problem - I 
Medium Accuracy: 37.73% Submissions: 100k+ Points: 4
Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can
take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). Value 0 at a cell in the matrix
represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it.
Note: In a path, no cell can be visited more than one time. If the source cell is 0, the rat cannot move to any other cell.

Example 1:

Input:
N = 4
m[][] = {{1, 0, 0, 0},
         {1, 1, 0, 1}, 
         {1, 1, 0, 0},
         {0, 1, 1, 1}}
Output:
DDRDRR DRDDRR
Explanation:
The rat can reach the destination at 
(3, 3) from (0, 0) by two paths - DRDDRR 
and DDRDRR, when printed in sorted order 
we get DDRDRR DRDDRR.


Example 2:

Input:
N = 2
m[][] = {{1, 0},
         {1, 0}}
Output:
-1
Explanation:
No path exists and destination cell is 
blocked.



Solution-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    static boolean[][] visited;
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        visited =  new boolean[n][n];
        ArrayList<String> al = new ArrayList<>();
        helper(visited,m,n,0,0,"",al);
        return al;
    }
    
    public static void helper(boolean[][] visited,int[][] nums,int n,int i,int j,String res,ArrayList<String>al){
        
        if(i<0||j<0||i>n-1||j>n-1||visited[i][j]||nums[i][j]==0) return;
        
        if(i==n-1 && j==n-1){
            al.add(res);
            return;
        }
        
        
        
        visited[i][j] = true;
        
        helper(visited,nums,n,i+1,j,res+"D",al);
        helper(visited,nums,n,i-1,j,res+"U",al);
        helper(visited,nums,n,i,j+1,res+"R",al);
        helper(visited,nums,n,i,j-1,res+"L",al);
        
        visited[i][j] = false;
    }
}
